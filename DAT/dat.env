import ApiHepler from "../services/services.js";
import { BASE1_URL } from "../constants/constants.js";
import { parseObjectToFormData } from "../utils/function.js";
import {
  emailValidate,
  namelValidate,
  phoneValidate,
  addressValidate,
  avatarValidate,
} from "../utils/function.js";

const name = document.querySelector(".name");
const email = document.querySelector(".email");
const tel = document.querySelector(".tel");
const address = document.querySelector(".address");
const avatar = document.querySelector(".avatar");
const description = document.querySelector(".desc");
const customerAddButton = document.querySelector(".addCustomer");
const table = document.querySelector("#datatablesSimple");
const tbody = table.querySelector("tbody");
const deleteConfirm = document.querySelector(".delete-confirm");
const getToken = localStorage.getItem("token");
console.log("TOKEN", getToken);

customerAddButton.addEventListener("click", (e) => {
  console.log(12123);
  let validEmail = emailValidate(email);
  let validPhone = phoneValidate(tel);
  let validAddress = addressValidate(address);
  let validName = namelValidate(name);
  let validAvatar = avatarValidate(avatar);
  let checkValidate =
    validEmail && validAddress && validName && validPhone && validAvatar;
  if (checkValidate) {
    const object = {
      name: name.value,
      email: email.value,
      tel: tel.value,
      address: address.value,
      description: description.value,
      avatar: avatar.value,
    };

    saveCustomer(object);
  }
});

const saveCustomer = async (values) => {
  try {
    ApiHepler.setJwtToken(
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiIxIiwianRpIjoiZTJjNTY5MTFmYjc4NGUxNDEyNTc5ZDZiNzY0YTk3N2M4NTU2YTUxZTY2NDk1YTY0OTE0YzJiZmVmMWVlZGU4MDdmZWNhZTZlNTYzYTRmZmUiLCJpYXQiOjE2NTc0NDg0ODMuODczODc4LCJuYmYiOjE2NTc0NDg0ODMuODczODgxMSwiZXhwIjoxNjg4OTg0NDgzLjg3MDc5ODEsInN1YiI6IjE4Iiwic2NvcGVzIjpbXX0.QIMKGIXAQz4uFF0RWV_KkOqDB1IwaRifVcTStcWb4Bcq4YHO62NwS5-Fch3koN7I1vUvBs6PFaW2zYIz5rSY0nhK56jvPiCZNt7hgpwenwrtp_NQQJE49C6dzYgmLk4Qt4LMm23SYuNxRxWZTOCERNjOFsYAcXavUT8aB5Y4Ub360rW8cR-tsp1ZnCSnTX4i4gvgOT_wX4sRhMJ9zEIU9IPRJmvVpalBNXheGqUvWMG29V3PkF4BQIbs-jBnSpneGcC1EVGtVcvq9CRcvYyfA_-g-tCsPOuFAVoUBjh4t43Ust25aO4Ig8FP42lHJS5Ebug8LyxWeyrZGhXWPwPRVHncOF_ps0a_A9TKs3alXRZqQMSEwHy-BQKYExhcvm9UCWZRIwsd5PxtwaoWc0sX10vQXX_nh62S_k7xSCcA8qniD_LVNjBH3OLkywdaM-sF1YnY45Dcbec1StGlYybz8SnzqunXsow5oz_6Vy9GV-fXPLrhpDwki4UzvlocCnY6HneUN2yG6pBKXvVe5wYgo0NJG05pY1FiBT9ndXQpCVjY8_f4UhYCS-LbgWQuHMUVC4LJwhaCEJunvQTel0xJKemJYGmFBYLcHLLaj28bXS54Hg0El4-my70Z3gyptoR3Mt5ze9D3s4Js5mdU9HnS5n6lx2m5KtZ_Zz8XFBOdscI"
    );
    const response = await ApiHepler.post({
      path: "customer/save",
      payload: JSON.stringify(values),
    });
    console.log("responseSaveCustomer", response);
    if (response.success === true) {
      alert("Them thanh cong");
      getListCustomer();
    }
  } catch (error) {
    console.log("error", error);
  }
};
const body = {
  page: 1,
};
const dataCustomer = [];
const getListCustomer = async () => {
  try {
    ApiHepler.setJwtToken(
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiIxIiwianRpIjoiZTJjNTY5MTFmYjc4NGUxNDEyNTc5ZDZiNzY0YTk3N2M4NTU2YTUxZTY2NDk1YTY0OTE0YzJiZmVmMWVlZGU4MDdmZWNhZTZlNTYzYTRmZmUiLCJpYXQiOjE2NTc0NDg0ODMuODczODc4LCJuYmYiOjE2NTc0NDg0ODMuODczODgxMSwiZXhwIjoxNjg4OTg0NDgzLjg3MDc5ODEsInN1YiI6IjE4Iiwic2NvcGVzIjpbXX0.QIMKGIXAQz4uFF0RWV_KkOqDB1IwaRifVcTStcWb4Bcq4YHO62NwS5-Fch3koN7I1vUvBs6PFaW2zYIz5rSY0nhK56jvPiCZNt7hgpwenwrtp_NQQJE49C6dzYgmLk4Qt4LMm23SYuNxRxWZTOCERNjOFsYAcXavUT8aB5Y4Ub360rW8cR-tsp1ZnCSnTX4i4gvgOT_wX4sRhMJ9zEIU9IPRJmvVpalBNXheGqUvWMG29V3PkF4BQIbs-jBnSpneGcC1EVGtVcvq9CRcvYyfA_-g-tCsPOuFAVoUBjh4t43Ust25aO4Ig8FP42lHJS5Ebug8LyxWeyrZGhXWPwPRVHncOF_ps0a_A9TKs3alXRZqQMSEwHy-BQKYExhcvm9UCWZRIwsd5PxtwaoWc0sX10vQXX_nh62S_k7xSCcA8qniD_LVNjBH3OLkywdaM-sF1YnY45Dcbec1StGlYybz8SnzqunXsow5oz_6Vy9GV-fXPLrhpDwki4UzvlocCnY6HneUN2yG6pBKXvVe5wYgo0NJG05pY1FiBT9ndXQpCVjY8_f4UhYCS-LbgWQuHMUVC4LJwhaCEJunvQTel0xJKemJYGmFBYLcHLLaj28bXS54Hg0El4-my70Z3gyptoR3Mt5ze9D3s4Js5mdU9HnS5n6lx2m5KtZ_Zz8XFBOdscI"
    );
    const resposne = await ApiHepler.get({
      path: "customer/list",
      params: body,
    });

    if (resposne.success === true) {
      renderTable(resposne.data.result);
    }
  } catch (e) {
    console.log(e);
  }
};
const renderTable = (data) => {
  const table = document.querySelector("#datatablesSimple");
  const tbody = table.querySelector("tbody");
  tbody.innerHTML = "";
  data.forEach((item) => {
    const tr = document.createElement("tr");
    tr.innerHTML = `
        <td><img src= "${item.avatar}" style="width:100px"/></td>
        <td>${item?.name}</td>
        <td>${item?.email}</td>
        <td>${item?.tel}</td>
        <td >
                                                    
        <button type="button" class="btn btn-warning update"   data-bs-toggle="modal" data-bs-target="#exampleModal2">Update</button>
        <button type="button" class="btn btn-danger delete" data-id='${item.id}'>Delete</button>
        
        </td>
         `;

    tbody.appendChild(tr);
  });
};

const deleteCustomer = async (id) => {
  try {
    ApiHepler.setJwtToken(
      "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJhdWQiOiIxIiwianRpIjoiZTJjNTY5MTFmYjc4NGUxNDEyNTc5ZDZiNzY0YTk3N2M4NTU2YTUxZTY2NDk1YTY0OTE0YzJiZmVmMWVlZGU4MDdmZWNhZTZlNTYzYTRmZmUiLCJpYXQiOjE2NTc0NDg0ODMuODczODc4LCJuYmYiOjE2NTc0NDg0ODMuODczODgxMSwiZXhwIjoxNjg4OTg0NDgzLjg3MDc5ODEsInN1YiI6IjE4Iiwic2NvcGVzIjpbXX0.QIMKGIXAQz4uFF0RWV_KkOqDB1IwaRifVcTStcWb4Bcq4YHO62NwS5-Fch3koN7I1vUvBs6PFaW2zYIz5rSY0nhK56jvPiCZNt7hgpwenwrtp_NQQJE49C6dzYgmLk4Qt4LMm23SYuNxRxWZTOCERNjOFsYAcXavUT8aB5Y4Ub360rW8cR-tsp1ZnCSnTX4i4gvgOT_wX4sRhMJ9zEIU9IPRJmvVpalBNXheGqUvWMG29V3PkF4BQIbs-jBnSpneGcC1EVGtVcvq9CRcvYyfA_-g-tCsPOuFAVoUBjh4t43Ust25aO4Ig8FP42lHJS5Ebug8LyxWeyrZGhXWPwPRVHncOF_ps0a_A9TKs3alXRZqQMSEwHy-BQKYExhcvm9UCWZRIwsd5PxtwaoWc0sX10vQXX_nh62S_k7xSCcA8qniD_LVNjBH3OLkywdaM-sF1YnY45Dcbec1StGlYybz8SnzqunXsow5oz_6Vy9GV-fXPLrhpDwki4UzvlocCnY6HneUN2yG6pBKXvVe5wYgo0NJG05pY1FiBT9ndXQpCVjY8_f4UhYCS-LbgWQuHMUVC4LJwhaCEJunvQTel0xJKemJYGmFBYLcHLLaj28bXS54Hg0El4-my70Z3gyptoR3Mt5ze9D3s4Js5mdU9HnS5n6lx2m5KtZ_Zz8XFBOdscI"
    );
    console.log(`id`, id);
    const response = await ApiHepler.get({
      path: `customer/delete/${id}`,
      params: {},
    });
    console.log("responseSaveCustomer", response);
    if (response.success === true) {
      console.log("Xoa thanh cong");
    }
  } catch (error) {
    console.log("error", error);
  }
};
if (getToken) {
  // getListCustomer({ page: BASE1_URL }, getToken);
} else {
  window.location.href = "../public/login.html";
}
await getListCustomer();
setTimeout(() => {
  document.querySelectorAll("tbody tr").forEach((row) => {
    $(row).on("click", ".delete", function () {
      console.log($(this).attr("data-id"));
      // deleteCustomer($(this).attr("data-id"));
      // getListCustomer();
    });
  });
});
setTimeout(() => {

  document.querySelectorAll("tbody tr").forEach((row) => {
    const deleteButton = row.querySelector(".delete");
    console.log(`deleteButton`, deleteButton);
    $("##exampleModal3").modal("show");
    deleteButton.addEventListener("click", function (e) {
     
      deleteCustomer(this.getAttribute("data-id"));
      getListCustomer();
     
    });
  });
});

  document.querySelectorAll("tbody tr").forEach((row) => {
    const deleteButton = row.querySelector(".delete");
   
  
    deleteButton.addEventListener("click", function (e) {
      
      
      # // deleteCustomer(this.getAttribute("data-id"));
      # // getListCustomer();
     
    });
  });


  $(document).on("click", ".update", function () {
  let id = this.getAttribute("data-id");
  console.log(id);
  let node = this.parentNode.parentNode;
  let dataName = node.querySelector(".nem");
  let dataEmail = node.querySelector(".imeo");
  let dataTel = node.querySelector(".theo");
  let dataIMG = node.querySelector(".img");
  let nameUpdate =$(".name").val(dataName.textContent);
  let emailUpdate =$(".email").val(dataEmail.textContent);
  let telUpdate =$(".tel").val(dataTel.textContent);
  let avatarUpdate =$(".avatar").val(dataIMG.textContent);
  console.log($(".name").val(dataName.textContent));

  const objectUpdate = {
    name :nameUpdate ,
    emal :emailUpdate,
    tel :telUpdate,
   avatar :avatarUpdate,
  }
 
  

  $("#updateModal").modal("show");
  editConfirm.addEventListener("click", function (e) {
    updateCustomer(id,objectUpdate);
    getListCustomer();
  });
});